class Solution {

    boolean[] visited;
    boolean[] isinit; // quick check for initial nodes
    int[][] graph;
    int visits = 0; // #nodes in the current connected component
    int inits = 0; // #initial nodes in the current connected component

    public int minMalwareSpread(int[][] graph, int[] initial) {
        this.graph = graph;
        visited = new boolean[graph.length + 1];
        isinit = new boolean[graph.length + 1];
        Arrays.sort(initial);
        for (int i: initial)
            isinit[i] = true;
        int maxsize = -1;
        int target = -1;
        for (int i: initial) {
            if (!visited[i]) {
                // reset
                visits = 0;
                inits = 0;
                dfs(i);
                // update target
                int size = visits;
                if (inits > 1) size = 0;
                if (size > maxsize) {
                    target = i;
                    maxsize = size;
                }
            }
        }
        return target;
    }

    private void dfs(int node) {
        visited[node] = true;
        visits++;
        if (isinit[node])
            inits++;
        for (int j = 0; j < graph[node].length; j++)
            if (graph[node][j] == 1 && !visited[j])
                dfs(j);
    }
}
